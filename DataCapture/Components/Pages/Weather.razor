@page "/weather"
@using Application.Abstraction.Mediator
@using Application.Features.Sample
@using Application.Features.Sample.Queries
@using Application.Models
@using Infrastructure.Mediator
@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (samples == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th aria-label="Temperature in Celsius">Temp. (C)</th>
            <th aria-label="Temperature in Farenheit">Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @*@foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }*@
        @if (samples is not null)
        {
            foreach (var sample in samples)
            {
                <tr>
                    <td>@sample.DateOfBirth.ToString()</td>
                    <td>@sample.Name</td>
                    <td>@sample.Description</td>
                    <td>@sample.Age</td>
                </tr>
            }
        }
    </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private List<SampleDto>? samples = new();
    private GetAllSamplesQuery _samplesQuery { get; set; } = new();
    [Inject] private IMediator _mediator { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
        
        var result = await _mediator.Send(_samplesQuery).ConfigureAwait(false);
        samples = result.Succeeded ? result.Data : new List<SampleDto>();

    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

}